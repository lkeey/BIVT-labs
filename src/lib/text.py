from re import finditer


def normalize(text: str, *, casefold: bool = True, yo2e: bool = True) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞:
        - –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É (–µ—Å–ª–∏ casefold=True)
        - –∑–∞–º–µ–Ω—è–µ—Ç '—ë' ‚Üí '–µ' –∏ '–Å' ‚Üí '–ï' (–µ—Å–ª–∏ yo2e=True)
        - –∑–∞–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª—ã —Ç–∞–±—É–ª—è—Ü–∏–∏, –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä–µ—Ç–∫–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª
        - —Å–∂–∏–º–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–æ –æ–¥–Ω–æ–≥–æ
        - —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏

    –ü—Ä–∏–º–µ—Ä—ã:
        - "–ü—Ä–ò–≤–ï—Ç\n–ú–ò—Ä\t" ‚Üí "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä" (casefold + —Å—Ö–ª–æ–ø–Ω—É—Ç—å –ø—Ä–æ–±–µ–ª—ã)
        - "—ë–∂–∏–∫, –Å–ª–∫–∞" (yo2e=True) ‚Üí "–µ–∂–∏–∫, –µ–ª–∫–∞"
        - "Hello\r\nWorld" ‚Üí "hello world"
        - "  –¥–≤–æ–π–Ω—ã–µ   –ø—Ä–æ–±–µ–ª—ã  " ‚Üí "–¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã"
    """

    if casefold:
        text = text.casefold()
    if yo2e:
        text = text.replace("—ë", "–µ").replace("–Å", "–ï")

    text = text.replace("\t", " ").replace("\r", " ").replace("\n", " ")

    while "  " in text:
        text = text.replace(" " * 2, " ")

    return text.strip()


def tokenize(text: str) -> list[str]:
    """
    –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã (—Å–ª–æ–≤–∞):
    - —Å–ª–æ–≤–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ \w (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ)
    - –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–∏—Å–∞ –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É')
    - —á–∏—Å–ª–∞ —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–ª–æ–≤–∞–º–∏
    - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤—Å–µ –Ω–µ–±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø—Ä–æ–±–µ–ª—ã, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è, —ç–º–æ–¥–∑–∏ –∏ —Ç.–ø.)

    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
        \w = [A-Za-z–ê-–Ø–∞-—è0-9_]
        (?:-\w+)* - –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–Ω–æ–ª—å –∏–ª–∏ –±–æ–ª—å—à–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        –≤–∏–¥–∞ - + —Å–ª–æ–≤–æ¬ª (hello-world-2025)

    –ü—Ä–∏–º–µ—Ä—ã:
        "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä" ‚Üí ["–ø—Ä–∏–≤–µ—Ç", "–º–∏—Ä"]
        "hello,world!!!" ‚Üí ["hello", "world"]
        "–ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∫—Ä—É—Ç–æ" ‚Üí ["–ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É", "–∫—Ä—É—Ç–æ"]
        "2025 –≥–æ–¥" ‚Üí ["2025", "–≥–æ–¥"]
        "emoji üòÄ –Ω–µ —Å–ª–æ–≤–æ" ‚Üí ["emoji", "–Ω–µ", "—Å–ª–æ–≤–æ"]
    """

    tokens = finditer(pattern=r"\w+(-\w+)*", string=text)

    return [i.group() for i in tokens]

    # return findall(r"\w+(?:-\w+)*", text)


def count_freq(tokens: list[str]) -> dict[str, int]:
    """
    –ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤.
    –ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—ë—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ (—Å—Ç—Ä–æ–∫).
    –ù–∞ –≤—ã—Ö–æ–¥–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å {—Ç–æ–∫–µ–Ω: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}.

    –ü—Ä–∏–º–µ—Ä—ã:
        - ["a","b","a","c","b","a"] ‚Üí —á–∞—Å—Ç–æ—Ç—ã {"a":3,"b":2,"c":1};
        - –ü—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ —á–∞—Å—Ç–æ—Ç: —Ç–æ–∫–µ–Ω—ã ["bb","aa","bb","aa","cc"] ‚Üí
        —á–∞—Å—Ç–æ—Ç—ã {"aa":2,"bb":2,"cc":1};

    """

    counts = {}

    for i in tokens:
        if i in counts:
            counts[i] += 1
        else:
            counts[i] = 1

    return counts


def top_n(freq: dict[str, int], n: int = 5) -> list[tuple[str, int]]:
    """
    –í—ã–±–æ—Ä–∫–∞ —Ç–æ–ø-N –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.
    - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã
    - –ø—Ä–∏ —Ä–∞–≤–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
    - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–æ–∫–µ–Ω, —á–∞—Å—Ç–æ—Ç–∞)

    –ü—Ä–∏–º–µ—Ä—ã:
        - top_n(..., n=2) ‚Üí [("a",3), ("b",2)]
        - top_n(..., n=2) ‚Üí [("aa",2), ("bb",2)]
        (–∞–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ).
    """

    freq = sorted(freq.items(), key=lambda item: [-item[1], item[0]])
    top_n = []

    for i in range(n):
        top_n.append((freq[i][0], freq[i][1]))

    return top_n
